{
    "information_for_contributors": [
        "This file has been converted from https://github.com/atom/language-sass/blob/master/grammars/uss.cson",
        "If you want to provide a fix or improvement, please create a pull request against the original repository.",
        "Once accepted there, we are happy to receive an update request."
    ],
    "version": "https://github.com/atom/language-sass/commit/f52ab12f7f9346cc2568129d8c4419bd3d506b47",
    "name": "uss",
    "scopeName": "source.css.uss",
    "patterns": [
        {
            "include": "#variable_setting"
        },
        {
            "include": "#at_rule_forward"
        },
        {
            "include": "#at_rule_use"
        },
        {
            "include": "#at_rule_include"
        },
        {
            "include": "#at_rule_import"
        },
        {
            "include": "#general"
        },
        {
            "include": "#flow_control"
        },
        {
            "include": "#rules"
        },
        {
            "include": "#property_list"
        },
        {
            "include": "#at_rule_mixin"
        },
        {
            "include": "#at_rule_media"
        },
        {
            "include": "#at_rule_function"
        },
        {
            "include": "#at_rule_charset"
        },
        {
            "include": "#at_rule_option"
        },
        {
            "include": "#at_rule_namespace"
        },
        {
            "include": "#at_rule_fontface"
        },
        {
            "include": "#at_rule_page"
        },
        {
            "include": "#at_rule_keyframes"
        },
        {
            "include": "#at_rule_at_root"
        },
        {
            "include": "#at_rule_supports"
        },
        {
            "match": ";",
            "name": "punctuation.terminator.rule.css"
        }
    ],
    "repository": {
        "at_rule_charset": {
            "begin": "\\s*((@)charset\\b)\\s*",
            "captures": {
                "1": {
                    "name": "keyword.control.at-rule.charset.uss"
                },
                "2": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "end": "\\s*((?=;|$))",
            "name": "meta.at-rule.charset.uss",
            "patterns": [
                {
                    "include": "#variable"
                },
                {
                    "include": "#string_single"
                },
                {
                    "include": "#string_double"
                }
            ]
        },
        "at_rule_content": {
            "begin": "\\s*((@)content\\b)\\s*",
            "captures": {
                "1": {
                    "name": "keyword.control.content.uss"
                }
            },
            "end": "\\s*((?=;))",
            "name": "meta.content.uss",
            "patterns": [
                {
                    "include": "#variable"
                },
                {
                    "include": "#selectors"
                },
                {
                    "include": "#property_values"
                }
            ]
        },
        "at_rule_each": {
            "begin": "\\s*((@)each\\b)\\s*",
            "captures": {
                "1": {
                    "name": "keyword.control.each.uss"
                },
                "2": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "end": "\\s*((?=}))",
            "name": "meta.at-rule.each.uss",
            "patterns": [
                {
                    "match": "\\b(in|,)\\b",
                    "name": "keyword.control.operator"
                },
                {
                    "include": "#variable"
                },
                {
                    "include": "#property_values"
                },
                {
                    "include": "$self"
                }
            ]
        },
        "at_rule_else": {
            "begin": "\\s*((@)else(\\s*(if)?))\\s*",
            "captures": {
                "1": {
                    "name": "keyword.control.else.uss"
                },
                "2": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "end": "\\s*(?={)",
            "name": "meta.at-rule.else.uss",
            "patterns": [
                {
                    "include": "#conditional_operators"
                },
                {
                    "include": "#variable"
                },
                {
                    "include": "#property_values"
                }
            ]
        },
        "at_rule_extend": {
            "begin": "\\s*((@)extend\\b)\\s*",
            "captures": {
                "1": {
                    "name": "keyword.control.at-rule.extend.uss"
                },
                "2": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "end": "\\s*(?=;)",
            "name": "meta.at-rule.extend.uss",
            "patterns": [
                {
                    "include": "#variable"
                },
                {
                    "include": "#selectors"
                },
                {
                    "include": "#property_values"
                }
            ]
        },
        "at_rule_fontface": {
            "patterns": [
                {
                    "begin": "^\\s*((@)font-face\\b)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.at-rule.fontface.uss"
                        },
                        "2": {
                            "name": "punctuation.definition.keyword.uss"
                        }
                    },
                    "end": "\\s*(?={)",
                    "name": "meta.at-rule.fontface.uss",
                    "patterns": [
                        {
                            "include": "#function_attributes"
                        }
                    ]
                }
            ]
        },
        "at_rule_for": {
            "begin": "\\s*((@)for\\b)\\s*",
            "captures": {
                "1": {
                    "name": "keyword.control.for.uss"
                },
                "2": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "end": "\\s*(?={)",
            "name": "meta.at-rule.for.uss",
            "patterns": [
                {
                    "match": "(==|!=|<=|>=|<|>|from|to|through)",
                    "name": "keyword.control.operator"
                },
                {
                    "include": "#variable"
                },
                {
                    "include": "#property_values"
                },
                {
                    "include": "$self"
                }
            ]
        },
        "at_rule_forward": {
            "begin": "\\s*((@)forward\\b)\\s*",
            "captures": {
                "1": {
                    "name": "keyword.control.at-rule.forward.uss"
                },
                "2": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "end": "\\s*(?=;)",
            "name": "meta.at-rule.forward.uss",
            "patterns": [
                {
                    "match": "\\b(as|hide|show)\\b",
                    "name": "keyword.control.operator"
                },
                {
                    "match": "\\b([\\w-]+)(\\*)",
                    "captures": {
                        "1": {
                            "name": "entity.other.attribute-name.module.uss"
                        },
                        "2": {
                            "name": "punctuation.definition.wildcard.uss"
                        }
                    }
                },
                {
                    "match": "\\b[\\w-]+\\b",
                    "name": "entity.name.function.uss"
                },
                {
                    "include": "#variable"
                },
                {
                    "include": "#string_single"
                },
                {
                    "include": "#string_double"
                },
                {
                    "include": "#comment_line"
                },
                {
                    "include": "#comment_block"
                }
            ]
        },
        "at_rule_function": {
            "patterns": [
                {
                    "begin": "\\s*((@)function\\b)\\s*",
                    "captures": {
                        "1": {
                            "name": "keyword.control.at-rule.function.uss"
                        },
                        "2": {
                            "name": "punctuation.definition.keyword.uss"
                        },
                        "3": {
                            "name": "entity.name.function.uss"
                        }
                    },
                    "end": "\\s*(?={)",
                    "name": "meta.at-rule.function.uss",
                    "patterns": [
                        {
                            "include": "#function_attributes"
                        }
                    ]
                },
                {
                    "captures": {
                        "1": {
                            "name": "keyword.control.at-rule.function.uss"
                        },
                        "2": {
                            "name": "punctuation.definition.keyword.uss"
                        },
                        "3": {
                            "name": "entity.name.function.uss"
                        }
                    },
                    "match": "\\s*((@)function\\b)\\s*",
                    "name": "meta.at-rule.function.uss"
                }
            ]
        },
        "at_rule_if": {
            "begin": "\\s*((@)if\\b)\\s*",
            "captures": {
                "1": {
                    "name": "keyword.control.if.uss"
                },
                "2": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "end": "\\s*(?={)",
            "name": "meta.at-rule.if.uss",
            "patterns": [
                {
                    "include": "#conditional_operators"
                },
                {
                    "include": "#variable"
                },
                {
                    "include": "#property_values"
                }
            ]
        },
        "at_rule_import": {
            "begin": "\\s*((@)import\\b)\\s*",
            "captures": {
                "1": {
                    "name": "keyword.control.at-rule.import.uss"
                },
                "2": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "end": "\\s*((?=;)|(?=}))",
            "name": "meta.at-rule.import.uss",
            "patterns": [
                {
                    "include": "#variable"
                },
                {
                    "include": "#string_single"
                },
                {
                    "include": "#string_double"
                },
                {
                    "include": "#functions"
                },
                {
                    "include": "#comment_line"
                }
            ]
        },
        "at_rule_include": {
            "patterns": [
                {
                    "begin": "(?<=@include)\\s+(?:([\\w-]+)\\s*(\\.))?([\\w-]+)\\s*(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "variable.uss"
                        },
                        "2": {
                            "name": "punctuation.access.module.uss"
                        },
                        "3": {
                            "name": "entity.name.function.uss"
                        },
                        "4": {
                            "name": "punctuation.definition.parameters.begin.bracket.round.uss"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.parameters.end.bracket.round.uss"
                        }
                    },
                    "name": "meta.at-rule.include.uss",
                    "patterns": [
                        {
                            "include": "#function_attributes"
                        }
                    ]
                },
                {
                    "match": "(?<=@include)\\s+(?:([\\w-]+)\\s*(\\.))?([\\w-]+)",
                    "captures": {
                        "0": {
                            "name": "meta.at-rule.include.uss"
                        },
                        "1": {
                            "name": "variable.uss"
                        },
                        "2": {
                            "name": "punctuation.access.module.uss"
                        },
                        "3": {
                            "name": "entity.name.function.uss"
                        }
                    }
                },
                {
                    "match": "((@)include)\\b",
                    "captures": {
                        "0": {
                            "name": "meta.at-rule.include.uss"
                        },
                        "1": {
                            "name": "keyword.control.at-rule.include.uss"
                        },
                        "2": {
                            "name": "punctuation.definition.keyword.uss"
                        }
                    }
                }
            ]
        },
        "at_rule_keyframes": {
            "begin": "(?<=^|\\s)(@)(?:-(?:webkit|moz)-)?keyframes\\b",
            "beginCaptures": {
                "0": {
                    "name": "keyword.control.at-rule.keyframes.uss"
                },
                "1": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "end": "(?<=})",
            "name": "meta.at-rule.keyframes.uss",
            "patterns": [
                {
                    "match": "(?<=@keyframes)\\s+((?:[_A-Za-z][-\\w]|-[_A-Za-z])[-\\w]*)",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.uss"
                        }
                    }
                },
                {
                    "begin": "(?<=@keyframes)\\s+(\")",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.uss"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.uss"
                        }
                    },
                    "name": "string.quoted.double.uss",
                    "contentName": "entity.name.function.uss",
                    "patterns": [
                        {
                            "match": "\\\\(\\h{1,6}|.)",
                            "name": "constant.character.escape.uss"
                        },
                        {
                            "include": "#interpolation"
                        }
                    ]
                },
                {
                    "begin": "(?<=@keyframes)\\s+(')",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.uss"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.uss"
                        }
                    },
                    "name": "string.quoted.single.uss",
                    "contentName": "entity.name.function.uss",
                    "patterns": [
                        {
                            "match": "\\\\(\\h{1,6}|.)",
                            "name": "constant.character.escape.uss"
                        },
                        {
                            "include": "#interpolation"
                        }
                    ]
                },
                {
                    "begin": "{",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.section.keyframes.begin.uss"
                        }
                    },
                    "end": "}",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.section.keyframes.end.uss"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\b(?:(?:100|[1-9]\\d|\\d)%|from|to)(?=\\s*{)",
                            "name": "entity.other.attribute-name.uss"
                        },
                        {
                            "include": "#flow_control"
                        },
                        {
                            "include": "#interpolation"
                        },
                        {
                            "include": "#property_list"
                        },
                        {
                            "include": "#rules"
                        }
                    ]
                }
            ]
        },
        "at_rule_media": {
            "patterns": [
                {
                    "begin": "^\\s*((@)media)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.at-rule.media.uss"
                        },
                        "2": {
                            "name": "punctuation.definition.keyword.uss"
                        }
                    },
                    "end": "\\s*(?={)",
                    "name": "meta.at-rule.media.uss",
                    "patterns": [
                        {
                            "include": "#comment_docblock"
                        },
                        {
                            "include": "#comment_block"
                        },
                        {
                            "include": "#comment_line"
                        },
                        {
                            "match": "\\b(only)\\b",
                            "name": "keyword.control.operator.css.uss"
                        },
                        {
                            "begin": "\\(",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.media-query.begin.bracket.round.uss"
                                }
                            },
                            "end": "\\)",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.definition.media-query.end.bracket.round.uss"
                                }
                            },
                            "name": "meta.property-list.media-query.uss",
                            "patterns": [
                                {
                                    "begin": "(?<![-a-z])(?=[-a-z])",
                                    "end": "$|(?![-a-z])",
                                    "name": "meta.property-name.media-query.uss",
                                    "patterns": [
                                        {
                                            "include": "source.css#media-features"
                                        },
                                        {
                                            "include": "source.css#property-names"
                                        }
                                    ]
                                },
                                {
                                    "begin": "(:)\\s*(?!(\\s*{))",
                                    "beginCaptures": {
                                        "1": {
                                            "name": "punctuation.separator.key-value.uss"
                                        }
                                    },
                                    "end": "\\s*(;|(?=}|\\)))",
                                    "endCaptures": {
                                        "1": {
                                            "name": "punctuation.terminator.rule.uss"
                                        }
                                    },
                                    "contentName": "meta.property-value.media-query.uss",
                                    "patterns": [
                                        {
                                            "include": "#general"
                                        },
                                        {
                                            "include": "#property_values"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "include": "#variable"
                        },
                        {
                            "include": "#conditional_operators"
                        },
                        {
                            "include": "source.css#media-types"
                        }
                    ]
                }
            ]
        },
        "at_rule_mixin": {
            "patterns": [
                {
                    "begin": "(?<=@mixin)\\s+([\\w-]+)\\s*(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.uss"
                        },
                        "2": {
                            "name": "punctuation.definition.parameters.begin.bracket.round.uss"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.parameters.end.bracket.round.uss"
                        }
                    },
                    "name": "meta.at-rule.mixin.uss",
                    "patterns": [
                        {
                            "include": "#function_attributes"
                        }
                    ]
                },
                {
                    "match": "(?<=@mixin)\\s+([\\w-]+)",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.uss"
                        }
                    },
                    "name": "meta.at-rule.mixin.uss"
                },
                {
                    "match": "((@)mixin)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.control.at-rule.mixin.uss"
                        },
                        "2": {
                            "name": "punctuation.definition.keyword.uss"
                        }
                    },
                    "name": "meta.at-rule.mixin.uss"
                }
            ]
        },
        "at_rule_namespace": {
            "patterns": [
                {
                    "begin": "(?<=@namespace)\\s+(?=url)",
                    "end": "(?=;|$)",
                    "name": "meta.at-rule.namespace.uss",
                    "patterns": [
                        {
                            "include": "#property_values"
                        },
                        {
                            "include": "#string_single"
                        },
                        {
                            "include": "#string_double"
                        }
                    ]
                },
                {
                    "begin": "(?<=@namespace)\\s+([\\w-]*)",
                    "captures": {
                        "1": {
                            "name": "entity.name.namespace-prefix.uss"
                        }
                    },
                    "end": "(?=;|$)",
                    "name": "meta.at-rule.namespace.uss",
                    "patterns": [
                        {
                            "include": "#variables"
                        },
                        {
                            "include": "#property_values"
                        },
                        {
                            "include": "#string_single"
                        },
                        {
                            "include": "#string_double"
                        }
                    ]
                },
                {
                    "match": "((@)namespace)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.control.at-rule.namespace.uss"
                        },
                        "2": {
                            "name": "punctuation.definition.keyword.uss"
                        }
                    },
                    "name": "meta.at-rule.namespace.uss"
                }
            ]
        },
        "at_rule_option": {
            "captures": {
                "1": {
                    "name": "keyword.control.at-rule.charset.uss"
                },
                "2": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "match": "^\\s*((@)option\\b)\\s*",
            "name": "meta.at-rule.option.uss"
        },
        "at_rule_page": {
            "patterns": [
                {
                    "begin": "^\\s*((@)page)(?=:|\\s)\\s*([-:\\w]*)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.at-rule.page.uss"
                        },
                        "2": {
                            "name": "punctuation.definition.keyword.uss"
                        },
                        "3": {
                            "name": "entity.name.function.uss"
                        }
                    },
                    "end": "\\s*(?={)",
                    "name": "meta.at-rule.page.uss"
                }
            ]
        },
        "at_rule_return": {
            "begin": "\\s*((@)(return)\\b)",
            "captures": {
                "1": {
                    "name": "keyword.control.return.uss"
                },
                "2": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "end": "\\s*((?=;))",
            "name": "meta.at-rule.return.uss",
            "patterns": [
                {
                    "include": "#variable"
                },
                {
                    "include": "#property_values"
                }
            ]
        },
        "at_rule_at_root": {
            "begin": "\\s*((@)(at-root))(\\s+|$)",
            "end": "\\s*(?={)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.at-rule.at-root.uss"
                },
                "2": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "name": "meta.at-rule.at-root.uss",
            "patterns": [
                {
                    "include": "#function_attributes"
                },
                {
                    "include": "#functions"
                },
                {
                    "include": "#selectors"
                }
            ]
        },
        "at_rule_supports": {
            "begin": "(?<=^|\\s)(@)supports\\b",
            "captures": {
                "0": {
                    "name": "keyword.control.at-rule.supports.uss"
                },
                "1": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "end": "(?={)|$",
            "name": "meta.at-rule.supports.uss",
            "patterns": [
                {
                    "include": "#logical_operators"
                },
                {
                    "include": "#properties"
                },
                {
                    "match": "\\(",
                    "name": "punctuation.definition.condition.begin.bracket.round.uss"
                },
                {
                    "match": "\\)",
                    "name": "punctuation.definition.condition.end.bracket.round.uss"
                }
            ]
        },
        "at_rule_use": {
            "begin": "\\s*((@)use\\b)\\s*",
            "captures": {
                "1": {
                    "name": "keyword.control.at-rule.use.uss"
                },
                "2": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "end": "\\s*(?=;)",
            "name": "meta.at-rule.use.uss",
            "patterns": [
                {
                    "match": "\\b(as|with)\\b",
                    "name": "keyword.control.operator"
                },
                {
                    "match": "\\b[\\w-]+\\b",
                    "name": "variable.uss"
                },
                {
                    "match": "\\*",
                    "name": "variable.language.expanded-namespace.uss"
                },
                {
                    "include": "#string_single"
                },
                {
                    "include": "#string_double"
                },
                {
                    "include": "#comment_line"
                },
                {
                    "include": "#comment_block"
                },
                {
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.parameters.begin.bracket.round.uss"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.parameters.end.bracket.round.uss"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#function_attributes"
                        }
                    ]
                }
            ]
        },
        "at_rule_warn": {
            "begin": "\\s*((@)(warn|debug|error)\\b)\\s*",
            "captures": {
                "1": {
                    "name": "keyword.control.warn.uss"
                },
                "2": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "end": "\\s*(?=;)",
            "name": "meta.at-rule.warn.uss",
            "patterns": [
                {
                    "include": "#variable"
                },
                {
                    "include": "#string_double"
                },
                {
                    "include": "#string_single"
                }
            ]
        },
        "at_rule_while": {
            "begin": "\\s*((@)while\\b)\\s*",
            "captures": {
                "1": {
                    "name": "keyword.control.while.uss"
                },
                "2": {
                    "name": "punctuation.definition.keyword.uss"
                }
            },
            "end": "\\s*(?=})",
            "name": "meta.at-rule.while.uss",
            "patterns": [
                {
                    "include": "#conditional_operators"
                },
                {
                    "include": "#variable"
                },
                {
                    "include": "#property_values"
                },
                {
                    "include": "$self"
                }
            ]
        },
        "comment_docblock": {
            "name": "comment.block.documentation.uss",
            "begin": "///",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.uss"
                }
            },
            "end": "(?=$)",
            "patterns": [
                {
                    "include": "source.sassdoc"
                }
            ]
        },
        "comment_block": {
            "begin": "/\\*",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.uss"
                }
            },
            "end": "\\*/",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.uss"
                }
            },
            "name": "comment.block.uss"
        },
        "comment_line": {
            "begin": "//",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.uss"
                }
            },
            "end": "\\n",
            "name": "comment.line.uss"
        },
        "constant_default": {
            "match": "!default",
            "name": "keyword.other.default.uss"
        },
        "constant_functions": {
            "begin": "(?:([\\w-]+)(\\.))?([\\w-]+)(\\()",
            "beginCaptures": {
                "1": {
                    "name": "variable.uss"
                },
                "2": {
                    "name": "punctuation.access.module.uss"
                },
                "3": {
                    "name": "support.function.misc.uss"
                },
                "4": {
                    "name": "punctuation.section.function.uss"
                }
            },
            "end": "(\\))",
            "endCaptures": {
                "1": {
                    "name": "punctuation.section.function.uss"
                }
            },
            "patterns": [
                {
                    "include": "#parameters"
                }
            ]
        },
        "constant_important": {
            "match": "!important",
            "name": "keyword.other.important.uss"
        },
        "constant_mathematical_symbols": {
            "match": "\\b(\\+|-|\\*|/)\\b",
            "name": "support.constant.mathematical-symbols.uss"
        },
        "constant_optional": {
            "match": "!optional",
            "name": "keyword.other.optional.uss"
        },
        "constant_sass_functions": {
            "begin": "(headings|stylesheet-url|rgba?|hsla?|ie-hex-str|red|green|blue|alpha|opacity|hue|saturation|lightness|prefixed|prefix|-moz|-svg|-css2|-pie|-webkit|-ms|font-(?:files|url)|grid-image|image-(?:width|height|url|color)|sprites?|sprite-(?:map|map-name|file|url|position)|inline-(?:font-files|image)|opposite-position|grad-point|grad-end-position|color-stops|color-stops-in-percentages|grad-color-stops|(?:radial|linear)-(?:gradient|svg-gradient)|opacify|fade-?in|transparentize|fade-?out|lighten|darken|saturate|desaturate|grayscale|adjust-(?:hue|lightness|saturation|color)|scale-(?:lightness|saturation|color)|change-color|spin|complement|invert|mix|-compass-(?:list|space-list|slice|nth|list-size)|blank|compact|nth|first-value-of|join|length|append|nest|append-selector|headers|enumerate|range|percentage|unitless|unit|if|type-of|comparable|elements-of-type|quote|unquote|escape|e|sin|cos|tan|abs|round|ceil|floor|pi|translate(?:X|Y))(\\()",
            "beginCaptures": {
                "1": {
                    "name": "support.function.misc.uss"
                },
                "2": {
                    "name": "punctuation.section.function.uss"
                }
            },
            "end": "(\\))",
            "endCaptures": {
                "1": {
                    "name": "punctuation.section.function.uss"
                }
            },
            "patterns": [
                {
                    "include": "#parameters"
                }
            ]
        },
        "flow_control": {
            "patterns": [
                {
                    "include": "#at_rule_if"
                },
                {
                    "include": "#at_rule_else"
                },
                {
                    "include": "#at_rule_warn"
                },
                {
                    "include": "#at_rule_for"
                },
                {
                    "include": "#at_rule_while"
                },
                {
                    "include": "#at_rule_each"
                },
                {
                    "include": "#at_rule_return"
                }
            ]
        },
        "function_attributes": {
            "patterns": [
                {
                    "match": ":",
                    "name": "punctuation.separator.key-value.uss"
                },
                {
                    "include": "#general"
                },
                {
                    "include": "#property_values"
                },
                {
                    "match": "[={}\\?;@]",
                    "name": "invalid.illegal.uss"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "begin": "([\\w-]{1,})(\\()\\s*",
                    "beginCaptures": {
                        "1": {
                            "name": "support.function.misc.uss"
                        },
                        "2": {
                            "name": "punctuation.section.function.uss"
                        }
                    },
                    "end": "(\\))",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.section.function.uss"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#parameters"
                        }
                    ]
                },
                {
                    "match": "([\\w-]{1,})",
                    "name": "support.function.misc.uss"
                }
            ]
        },
        "general": {
            "patterns": [
                {
                    "include": "#variable"
                },
                {
                    "include": "#comment_docblock"
                },
                {
                    "include": "#comment_block"
                },
                {
                    "include": "#comment_line"
                }
            ]
        },
        "interpolation": {
            "begin": "#{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.interpolation.begin.bracket.curly.uss"
                }
            },
            "end": "}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.interpolation.end.bracket.curly.uss"
                }
            },
            "name": "variable.interpolation.uss",
            "patterns": [
                {
                    "include": "#variable"
                },
                {
                    "include": "#property_values"
                }
            ]
        },
        "conditional_operators": {
            "patterns": [
                {
                    "include": "#comparison_operators"
                },
                {
                    "include": "#logical_operators"
                }
            ]
        },
        "comparison_operators": {
            "match": "==|!=|<=|>=|<|>",
            "name": "keyword.operator.comparison.uss"
        },
        "logical_operators": {
            "match": "\\b(not|or|and)\\b",
            "name": "keyword.operator.logical.uss"
        },
        "map": {
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.map.begin.bracket.round.uss"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.map.end.bracket.round.uss"
                }
            },
            "name": "meta.definition.variable.map.uss",
            "patterns": [
                {
                    "include": "#comment_docblock"
                },
                {
                    "include": "#comment_block"
                },
                {
                    "include": "#comment_line"
                },
                {
                    "match": "\\b([\\w-]+)\\s*(:)",
                    "captures": {
                        "1": {
                            "name": "support.type.map.key.uss"
                        },
                        "2": {
                            "name": "punctuation.separator.key-value.uss"
                        }
                    }
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.delimiter.uss"
                },
                {
                    "include": "#map"
                },
                {
                    "include": "#variable"
                },
                {
                    "include": "#property_values"
                }
            ]
        },
        "operators": {
            "match": "[-+*/](?!\\s*[-+*/])",
            "name": "keyword.operator.css"
        },
        "parameters": {
            "patterns": [
                {
                    "include": "#variable"
                },
                {
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.begin.bracket.round.uss"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.end.bracket.round.uss"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#function_attributes"
                        }
                    ]
                },
                {
                    "include": "#property_values"
                },
                {
                    "include": "#comment_block"
                },
                {
                    "match": "[^'\",) \\t]+",
                    "name": "variable.parameter.url.uss"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.delimiter.uss"
                }
            ]
        },
        "properties": {
            "patterns": [
                {
                    "begin": "(?<![-a-z])(?=[-a-z])",
                    "end": "$|(?![-a-z])",
                    "name": "meta.property-name.uss",
                    "patterns": [
                        {
                            "include": "source.css#property-names"
                        },
                        {
                            "include": "#at_rule_include"
                        }
                    ]
                },
                {
                    "begin": "(:)\\s*(?!(\\s*{))",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.separator.key-value.uss"
                        }
                    },
                    "end": "\\s*(;|(?=}|\\)))",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.terminator.rule.uss"
                        }
                    },
                    "contentName": "meta.property-value.uss",
                    "patterns": [
                        {
                            "include": "#general"
                        },
                        {
                            "include": "#property_values"
                        }
                    ]
                }
            ]
        },
        "property_list": {
            "begin": "{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.section.property-list.begin.bracket.curly.uss"
                }
            },
            "end": "}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.property-list.end.bracket.curly.uss"
                }
            },
            "name": "meta.property-list.uss",
            "patterns": [
                {
                    "include": "#flow_control"
                },
                {
                    "include": "#rules"
                },
                {
                    "include": "#properties"
                },
                {
                    "include": "$self"
                }
            ]
        },
        "property_values": {
            "patterns": [
                {
                    "include": "#string_single"
                },
                {
                    "include": "#string_double"
                },
                {
                    "include": "#constant_functions"
                },
                {
                    "include": "#constant_sass_functions"
                },
                {
                    "include": "#constant_important"
                },
                {
                    "include": "#constant_default"
                },
                {
                    "include": "#constant_optional"
                },
                {
                    "include": "source.css#numeric-values"
                },
                {
                    "include": "source.css#property-keywords"
                },
                {
                    "include": "source.css#color-keywords"
                },
                {
                    "include": "source.css#property-names"
                },
                {
                    "include": "#constant_mathematical_symbols"
                },
                {
                    "include": "#operators"
                },
                {
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.begin.bracket.round.uss"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.end.bracket.round.uss"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#general"
                        },
                        {
                            "include": "#property_values"
                        }
                    ]
                }
            ]
        },
        "rules": {
            "patterns": [
                {
                    "include": "#general"
                },
                {
                    "include": "#at_rule_extend"
                },
                {
                    "include": "#at_rule_content"
                },
                {
                    "include": "#at_rule_include"
                },
                {
                    "include": "#at_rule_media"
                },
                {
                    "include": "#selectors"
                }
            ]
        },
        "selector_attribute": {
            "match": "(?xi)\n(\\[)\n\\s*\n(\n  (?:\n    [-a-zA-Z_0-9]|[^\\x00-\\x7F]       # Valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n    | \\#\\{                           # Interpolation (escaped to avoid Coffeelint errors)\n    | \\.?\\$                          # Possible start of interpolation variable\n    | }                                # Possible end of interpolation\n  )+?\n)\n(?:\n  \\s*([~|^$*]?=)\\s*\n  (?:\n    (\n      (?:\n        [-a-zA-Z_0-9]|[^\\x00-\\x7F]       # Valid identifier characters\n        | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n        | \\#\\{                           # Interpolation (escaped to avoid Coffeelint errors)\n        | \\.?\\$                          # Possible start of interpolation variable\n        | }                                # Possible end of interpolation\n      )+\n    )\n    |\n    ((\")(.*?)(\"))\n    |\n    ((')(.*?)('))\n  )\n)?\n\\s*\n(\\])",
            "name": "meta.attribute-selector.uss",
            "captures": {
                "1": {
                    "name": "punctuation.definition.attribute-selector.begin.bracket.square.uss"
                },
                "2": {
                    "name": "entity.other.attribute-name.attribute.uss",
                    "patterns": [
                        {
                            "include": "#interpolation"
                        },
                        {
                            "match": "\\\\([0-9a-fA-F]{1,6}|.)",
                            "name": "constant.character.escape.uss"
                        },
                        {
                            "match": "\\$|}",
                            "name": "invalid.illegal.uss"
                        }
                    ]
                },
                "3": {
                    "name": "keyword.operator.uss"
                },
                "4": {
                    "name": "string.unquoted.attribute-value.uss",
                    "patterns": [
                        {
                            "include": "#interpolation"
                        },
                        {
                            "match": "\\\\([0-9a-fA-F]{1,6}|.)",
                            "name": "constant.character.escape.uss"
                        },
                        {
                            "match": "\\$|}",
                            "name": "invalid.illegal.uss"
                        }
                    ]
                },
                "5": {
                    "name": "string.quoted.double.attribute-value.uss"
                },
                "6": {
                    "name": "punctuation.definition.string.begin.uss"
                },
                "7": {
                    "patterns": [
                        {
                            "include": "#interpolation"
                        },
                        {
                            "match": "\\\\([0-9a-fA-F]{1,6}|.)",
                            "name": "constant.character.escape.uss"
                        },
                        {
                            "match": "\\$|}",
                            "name": "invalid.illegal.uss"
                        }
                    ]
                },
                "8": {
                    "name": "punctuation.definition.string.end.uss"
                },
                "9": {
                    "name": "string.quoted.single.attribute-value.uss"
                },
                "10": {
                    "name": "punctuation.definition.string.begin.uss"
                },
                "11": {
                    "patterns": [
                        {
                            "include": "#interpolation"
                        },
                        {
                            "match": "\\\\([0-9a-fA-F]{1,6}|.)",
                            "name": "constant.character.escape.uss"
                        },
                        {
                            "match": "\\$|}",
                            "name": "invalid.illegal.uss"
                        }
                    ]
                },
                "12": {
                    "name": "punctuation.definition.string.end.uss"
                },
                "13": {
                    "name": "punctuation.definition.attribute-selector.end.bracket.square.uss"
                }
            }
        },
        "selector_class": {
            "match": "(?x)\n(\\.)                                  # Valid class-name\n(\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]     # Valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n    | \\#\\{                           # Interpolation (escaped to avoid Coffeelint errors)\n    | \\.?\\$                          # Possible start of interpolation variable\n    | }                                # Possible end of interpolation\n  )+\n)                                      # Followed by either:\n(?= $                                  # - End of the line\n  | [\\s,\\#)\\[:{>+~|]                # - Another selector\n  | \\.[^$]                            # - Class selector, negating module variable\n  | /\\*                               # - A block comment\n  | ;                                  # - A semicolon\n)",
            "name": "entity.other.attribute-name.class.css",
            "captures": {
                "1": {
                    "name": "punctuation.definition.entity.css"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#interpolation"
                        },
                        {
                            "match": "\\\\([0-9a-fA-F]{1,6}|.)",
                            "name": "constant.character.escape.uss"
                        },
                        {
                            "match": "\\$|}",
                            "name": "invalid.illegal.uss"
                        }
                    ]
                }
            }
        },
        "selector_custom": {
            "match": "\\b([a-zA-Z0-9]+(-[a-zA-Z0-9]+)+)(?=\\.|\\s++[^:]|\\s*[,\\[{]|:(link|visited|hover|active|focus|target|lang|disabled|enabled|checked|indeterminate|root|nth-(child|last-child|of-type|last-of-type)|first-child|last-child|first-of-type|last-of-type|only-child|only-of-type|empty|not|valid|invalid)(\\([0-9A-Za-z]*\\))?)",
            "name": "entity.name.tag.custom.uss"
        },
        "selector_id": {
            "match": "(?x)\n(\\#)                                  # Valid id-name\n(\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]     # Valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n    | \\#\\{                           # Interpolation (escaped to avoid Coffeelint errors)\n    | \\.?\\$                          # Possible start of interpolation variable\n    | }                                # Possible end of interpolation\n  )+\n)                                      # Followed by either:\n(?= $                                  # - End of the line\n  | [\\s,\\#)\\[:{>+~|]                # - Another selector\n  | \\.[^$]                            # - Class selector, negating module variable\n  | /\\*                               # - A block comment\n)",
            "name": "entity.other.attribute-name.id.css",
            "captures": {
                "1": {
                    "name": "punctuation.definition.entity.css"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#interpolation"
                        },
                        {
                            "match": "\\\\([0-9a-fA-F]{1,6}|.)",
                            "name": "constant.character.escape.uss"
                        },
                        {
                            "match": "\\$|}",
                            "name": "invalid.illegal.identifier.uss"
                        }
                    ]
                }
            }
        },
        "selector_placeholder": {
            "match": "(?x)\n(%)                                    # Valid placeholder-name\n(\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]     # Valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n    | \\#\\{                           # Interpolation (escaped to avoid Coffeelint errors)\n    | \\.\\$                           # Possible start of interpolation module scope variable\n    | \\$                              # Possible start of interpolation variable\n    | }                                # Possible end of interpolation\n  )+\n)                                      # Followed by either:\n(?= ;                                  # - End of statement\n  | $                                  # - End of the line\n  | [\\s,\\#)\\[:{>+~|]                # - Another selector\n  | \\.[^$]                            # - Class selector, negating module variable\n  | /\\*                               # - A block comment\n)",
            "name": "entity.other.attribute-name.placeholder.css",
            "captures": {
                "1": {
                    "name": "punctuation.definition.entity.css"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#interpolation"
                        },
                        {
                            "match": "\\\\([0-9a-fA-F]{1,6}|.)",
                            "name": "constant.character.escape.uss"
                        },
                        {
                            "match": "\\$|}",
                            "name": "invalid.illegal.identifier.uss"
                        }
                    ]
                }
            }
        },
        "parent_selector_suffix": {
            "match": "(?x)\n(?<=&)\n(\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]     # Valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n    | \\#\\{                           # Interpolation (escaped to avoid Coffeelint errors)\n    | \\$                              # Possible start of interpolation variable\n    | }                                # Possible end of interpolation\n  )+\n)                                      # Followed by either:\n(?= $                                  # - End of the line\n  | [\\s,.\\#)\\[:{>+~|]               # - Another selector\n  | /\\*                               # - A block comment\n)",
            "name": "entity.other.attribute-name.parent-selector-suffix.css",
            "captures": {
                "1": {
                    "name": "punctuation.definition.entity.css"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#interpolation"
                        },
                        {
                            "match": "\\\\([0-9a-fA-F]{1,6}|.)",
                            "name": "constant.character.escape.uss"
                        },
                        {
                            "match": "\\$|}",
                            "name": "invalid.illegal.identifier.uss"
                        }
                    ]
                }
            }
        },
        "selector_pseudo_class": {
            "patterns": [
                {
                    "begin": "((:)\\bnth-(?:child|last-child|of-type|last-of-type))(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.other.attribute-name.pseudo-class.css"
                        },
                        "2": {
                            "name": "punctuation.definition.entity.css"
                        },
                        "3": {
                            "name": "punctuation.definition.pseudo-class.begin.bracket.round.css"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.pseudo-class.end.bracket.round.css"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#interpolation"
                        },
                        {
                            "match": "\\d+",
                            "name": "constant.numeric.css"
                        },
                        {
                            "match": "(?<=\\d)n\\b|\\b(n|even|odd)\\b",
                            "name": "constant.other.uss"
                        },
                        {
                            "match": "\\w+",
                            "name": "invalid.illegal.uss"
                        }
                    ]
                },
                {
                    "include": "source.css#pseudo-classes"
                },
                {
                    "include": "source.css#pseudo-elements"
                },
                {
                    "include": "source.css#functional-pseudo-classes"
                }
            ]
        },
        "selectors": {
            "patterns": [
                {
                    "include": "source.css#tag-names"
                },
                {
                    "include": "#selector_custom"
                },
                {
                    "include": "#selector_class"
                },
                {
                    "include": "#selector_id"
                },
                {
                    "include": "#selector_pseudo_class"
                },
                {
                    "include": "#tag_wildcard"
                },
                {
                    "include": "#tag_parent_reference"
                },
                {
                    "include": "source.css#pseudo-elements"
                },
                {
                    "include": "#selector_attribute"
                },
                {
                    "include": "#selector_placeholder"
                },
                {
                    "include": "#parent_selector_suffix"
                }
            ]
        },
        "string_double": {
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.uss"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.uss"
                }
            },
            "name": "string.quoted.double.uss",
            "patterns": [
                {
                    "match": "\\\\(\\h{1,6}|.)",
                    "name": "constant.character.escape.uss"
                },
                {
                    "include": "#interpolation"
                }
            ]
        },
        "string_single": {
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.uss"
                }
            },
            "end": "'",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.uss"
                }
            },
            "name": "string.quoted.single.uss",
            "patterns": [
                {
                    "match": "\\\\(\\h{1,6}|.)",
                    "name": "constant.character.escape.uss"
                },
                {
                    "include": "#interpolation"
                }
            ]
        },
        "tag_parent_reference": {
            "match": "&",
            "name": "entity.name.tag.reference.uss"
        },
        "tag_wildcard": {
            "match": "\\*",
            "name": "entity.name.tag.wildcard.uss"
        },
        "variable": {
            "patterns": [
                {
                    "include": "#variables"
                },
                {
                    "include": "#interpolation"
                }
            ]
        },
        "variable_setting": {
            "begin": "(?=\\$[\\w-]+\\s*:)",
            "end": ";",
            "endCaptures": {
                "0": {
                    "name": "punctuation.terminator.rule.uss"
                }
            },
            "contentName": "meta.definition.variable.uss",
            "patterns": [
                {
                    "match": "\\$[\\w-]+(?=\\s*:)",
                    "name": "variable.uss"
                },
                {
                    "begin": ":",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.separator.key-value.uss"
                        }
                    },
                    "end": "(?=;)",
                    "patterns": [
                        {
                            "include": "#comment_docblock"
                        },
                        {
                            "include": "#comment_block"
                        },
                        {
                            "include": "#comment_line"
                        },
                        {
                            "include": "#map"
                        },
                        {
                            "include": "#property_values"
                        },
                        {
                            "include": "#variable"
                        },
                        {
                            "match": ",",
                            "name": "punctuation.separator.delimiter.uss"
                        }
                    ]
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "match": "\\b([\\w-]+)(\\.)(\\$[\\w-]+)\\b",
                    "captures": {
                        "1": {
                            "name": "variable.uss"
                        },
                        "2": {
                            "name": "punctuation.access.module.uss"
                        },
                        "3": {
                            "name": "variable.uss"
                        }
                    }
                },
                {
                    "match": "(\\$|\\-\\-)[A-Za-z0-9_-]+\\b",
                    "name": "variable.uss"
                }
            ]
        }
    }
}